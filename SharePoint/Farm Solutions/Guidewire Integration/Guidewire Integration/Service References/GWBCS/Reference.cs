//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Guidewire_Integration.GWBCS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkMatter", Namespace="http://schemas.datacontract.org/2004/07/SPGuidewireService")]
    [System.SerializableAttribute()]
    public partial class WorkMatter : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameDenormField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string trg_WorkMatterDescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimNumber {
            get {
                return this.ClaimNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimNumberField, value) != true)) {
                    this.ClaimNumberField = value;
                    this.RaisePropertyChanged("ClaimNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameDenorm {
            get {
                return this.NameDenormField;
            }
            set {
                if ((object.ReferenceEquals(this.NameDenormField, value) != true)) {
                    this.NameDenormField = value;
                    this.RaisePropertyChanged("NameDenorm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trg_WorkMatterDescription {
            get {
                return this.trg_WorkMatterDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.trg_WorkMatterDescriptionField, value) != true)) {
                    this.trg_WorkMatterDescriptionField = value;
                    this.RaisePropertyChanged("trg_WorkMatterDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vendor", Namespace="http://schemas.datacontract.org/2004/07/SPGuidewireService")]
    [System.SerializableAttribute()]
    public partial class Vendor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactID {
            get {
                return this.ContactIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactIDField, value) != true)) {
                    this.ContactIDField = value;
                    this.RaisePropertyChanged("ContactID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactName {
            get {
                return this.ContactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNameField, value) != true)) {
                    this.ContactNameField = value;
                    this.RaisePropertyChanged("ContactName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkMatterDocument", Namespace="http://schemas.datacontract.org/2004/07/SPGuidewireService")]
    [System.SerializableAttribute()]
    public partial class WorkMatterDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubcategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WorkMatterDescField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimNumber {
            get {
                return this.ClaimNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimNumberField, value) != true)) {
                    this.ClaimNumberField = value;
                    this.RaisePropertyChanged("ClaimNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filename {
            get {
                return this.FilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameField, value) != true)) {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicID {
            get {
                return this.PublicIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicIDField, value) != true)) {
                    this.PublicIDField = value;
                    this.RaisePropertyChanged("PublicID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SPID {
            get {
                return this.SPIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SPIDField, value) != true)) {
                    this.SPIDField = value;
                    this.RaisePropertyChanged("SPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subcategory {
            get {
                return this.SubcategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubcategoryField, value) != true)) {
                    this.SubcategoryField = value;
                    this.RaisePropertyChanged("Subcategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WorkMatterDesc {
            get {
                return this.WorkMatterDescField;
            }
            set {
                if ((object.ReferenceEquals(this.WorkMatterDescField, value) != true)) {
                    this.WorkMatterDescField = value;
                    this.RaisePropertyChanged("WorkMatterDesc");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VendorDocument", Namespace="http://schemas.datacontract.org/2004/07/SPGuidewireService")]
    [System.SerializableAttribute()]
    public partial class VendorDocument : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilenameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MimeTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PublicIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SPIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SubcategoryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactID {
            get {
                return this.ContactIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactIDField, value) != true)) {
                    this.ContactIDField = value;
                    this.RaisePropertyChanged("ContactID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactName {
            get {
                return this.ContactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNameField, value) != true)) {
                    this.ContactNameField = value;
                    this.RaisePropertyChanged("ContactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filename {
            get {
                return this.FilenameField;
            }
            set {
                if ((object.ReferenceEquals(this.FilenameField, value) != true)) {
                    this.FilenameField = value;
                    this.RaisePropertyChanged("Filename");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MimeType {
            get {
                return this.MimeTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MimeTypeField, value) != true)) {
                    this.MimeTypeField = value;
                    this.RaisePropertyChanged("MimeType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PublicID {
            get {
                return this.PublicIDField;
            }
            set {
                if ((object.ReferenceEquals(this.PublicIDField, value) != true)) {
                    this.PublicIDField = value;
                    this.RaisePropertyChanged("PublicID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SPID {
            get {
                return this.SPIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SPIDField, value) != true)) {
                    this.SPIDField = value;
                    this.RaisePropertyChanged("SPID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subcategory {
            get {
                return this.SubcategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubcategoryField, value) != true)) {
                    this.SubcategoryField = value;
                    this.RaisePropertyChanged("Subcategory");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GWBCS.IGuidewire")]
    public interface IGuidewire {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllWorkMatters", ReplyAction="http://tempuri.org/IGuidewire/GetAllWorkMattersResponse")]
        Guidewire_Integration.GWBCS.WorkMatter[] GetAllWorkMatters(string ClaimNumber, string NameDenorm, string trg_WorkMatterDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllWorkMatters", ReplyAction="http://tempuri.org/IGuidewire/GetAllWorkMattersResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatter[]> GetAllWorkMattersAsync(string ClaimNumber, string NameDenorm, string trg_WorkMatterDescription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetWorkMatterByID", ReplyAction="http://tempuri.org/IGuidewire/GetWorkMatterByIDResponse")]
        Guidewire_Integration.GWBCS.WorkMatter GetWorkMatterByID(string ClaimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetWorkMatterByID", ReplyAction="http://tempuri.org/IGuidewire/GetWorkMatterByIDResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatter> GetWorkMatterByIDAsync(string ClaimNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllVendors", ReplyAction="http://tempuri.org/IGuidewire/GetAllVendorsResponse")]
        Guidewire_Integration.GWBCS.Vendor[] GetAllVendors(string ContactID, string ContactName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllVendors", ReplyAction="http://tempuri.org/IGuidewire/GetAllVendorsResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.Vendor[]> GetAllVendorsAsync(string ContactID, string ContactName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetVendorByID", ReplyAction="http://tempuri.org/IGuidewire/GetVendorByIDResponse")]
        Guidewire_Integration.GWBCS.Vendor GetVendorByID(string ContactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetVendorByID", ReplyAction="http://tempuri.org/IGuidewire/GetVendorByIDResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.Vendor> GetVendorByIDAsync(string ContactID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllWorkMatterDocuments", ReplyAction="http://tempuri.org/IGuidewire/GetAllWorkMatterDocumentsResponse")]
        Guidewire_Integration.GWBCS.WorkMatterDocument[] GetAllWorkMatterDocuments(string PublicID, string SPID, string Filename, string ClaimNumber, string WorkMatterDesc, string AccountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllWorkMatterDocuments", ReplyAction="http://tempuri.org/IGuidewire/GetAllWorkMatterDocumentsResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatterDocument[]> GetAllWorkMatterDocumentsAsync(string PublicID, string SPID, string Filename, string ClaimNumber, string WorkMatterDesc, string AccountName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetWorkMatterDocumentBySPID", ReplyAction="http://tempuri.org/IGuidewire/GetWorkMatterDocumentBySPIDResponse")]
        Guidewire_Integration.GWBCS.WorkMatterDocument GetWorkMatterDocumentBySPID(string SPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetWorkMatterDocumentBySPID", ReplyAction="http://tempuri.org/IGuidewire/GetWorkMatterDocumentBySPIDResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatterDocument> GetWorkMatterDocumentBySPIDAsync(string SPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetWorkMatterDocumentByPublicID", ReplyAction="http://tempuri.org/IGuidewire/GetWorkMatterDocumentByPublicIDResponse")]
        Guidewire_Integration.GWBCS.WorkMatterDocument GetWorkMatterDocumentByPublicID(string PublicID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetWorkMatterDocumentByPublicID", ReplyAction="http://tempuri.org/IGuidewire/GetWorkMatterDocumentByPublicIDResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatterDocument> GetWorkMatterDocumentByPublicIDAsync(string PublicID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllVendorDocuments", ReplyAction="http://tempuri.org/IGuidewire/GetAllVendorDocumentsResponse")]
        Guidewire_Integration.GWBCS.VendorDocument[] GetAllVendorDocuments(string PublicID, string SPID, string Filename, string ContactID, string ContactName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetAllVendorDocuments", ReplyAction="http://tempuri.org/IGuidewire/GetAllVendorDocumentsResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.VendorDocument[]> GetAllVendorDocumentsAsync(string PublicID, string SPID, string Filename, string ContactID, string ContactName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetVendorDocumentBySPID", ReplyAction="http://tempuri.org/IGuidewire/GetVendorDocumentBySPIDResponse")]
        Guidewire_Integration.GWBCS.VendorDocument GetVendorDocumentBySPID(string SPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetVendorDocumentBySPID", ReplyAction="http://tempuri.org/IGuidewire/GetVendorDocumentBySPIDResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.VendorDocument> GetVendorDocumentBySPIDAsync(string SPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetVendorDocumentByPublicID", ReplyAction="http://tempuri.org/IGuidewire/GetVendorDocumentByPublicIDResponse")]
        Guidewire_Integration.GWBCS.VendorDocument GetVendorDocumentByPublicID(string PublicID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuidewire/GetVendorDocumentByPublicID", ReplyAction="http://tempuri.org/IGuidewire/GetVendorDocumentByPublicIDResponse")]
        System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.VendorDocument> GetVendorDocumentByPublicIDAsync(string PublicID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGuidewireChannel : Guidewire_Integration.GWBCS.IGuidewire, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GuidewireClient : System.ServiceModel.ClientBase<Guidewire_Integration.GWBCS.IGuidewire>, Guidewire_Integration.GWBCS.IGuidewire {
        
        public GuidewireClient() {
        }
        
        public GuidewireClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GuidewireClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GuidewireClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GuidewireClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Guidewire_Integration.GWBCS.WorkMatter[] GetAllWorkMatters(string ClaimNumber, string NameDenorm, string trg_WorkMatterDescription) {
            return base.Channel.GetAllWorkMatters(ClaimNumber, NameDenorm, trg_WorkMatterDescription);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatter[]> GetAllWorkMattersAsync(string ClaimNumber, string NameDenorm, string trg_WorkMatterDescription) {
            return base.Channel.GetAllWorkMattersAsync(ClaimNumber, NameDenorm, trg_WorkMatterDescription);
        }
        
        public Guidewire_Integration.GWBCS.WorkMatter GetWorkMatterByID(string ClaimNumber) {
            return base.Channel.GetWorkMatterByID(ClaimNumber);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatter> GetWorkMatterByIDAsync(string ClaimNumber) {
            return base.Channel.GetWorkMatterByIDAsync(ClaimNumber);
        }
        
        public Guidewire_Integration.GWBCS.Vendor[] GetAllVendors(string ContactID, string ContactName) {
            return base.Channel.GetAllVendors(ContactID, ContactName);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.Vendor[]> GetAllVendorsAsync(string ContactID, string ContactName) {
            return base.Channel.GetAllVendorsAsync(ContactID, ContactName);
        }
        
        public Guidewire_Integration.GWBCS.Vendor GetVendorByID(string ContactID) {
            return base.Channel.GetVendorByID(ContactID);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.Vendor> GetVendorByIDAsync(string ContactID) {
            return base.Channel.GetVendorByIDAsync(ContactID);
        }
        
        public Guidewire_Integration.GWBCS.WorkMatterDocument[] GetAllWorkMatterDocuments(string PublicID, string SPID, string Filename, string ClaimNumber, string WorkMatterDesc, string AccountName) {
            return base.Channel.GetAllWorkMatterDocuments(PublicID, SPID, Filename, ClaimNumber, WorkMatterDesc, AccountName);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatterDocument[]> GetAllWorkMatterDocumentsAsync(string PublicID, string SPID, string Filename, string ClaimNumber, string WorkMatterDesc, string AccountName) {
            return base.Channel.GetAllWorkMatterDocumentsAsync(PublicID, SPID, Filename, ClaimNumber, WorkMatterDesc, AccountName);
        }
        
        public Guidewire_Integration.GWBCS.WorkMatterDocument GetWorkMatterDocumentBySPID(string SPID) {
            return base.Channel.GetWorkMatterDocumentBySPID(SPID);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatterDocument> GetWorkMatterDocumentBySPIDAsync(string SPID) {
            return base.Channel.GetWorkMatterDocumentBySPIDAsync(SPID);
        }
        
        public Guidewire_Integration.GWBCS.WorkMatterDocument GetWorkMatterDocumentByPublicID(string PublicID) {
            return base.Channel.GetWorkMatterDocumentByPublicID(PublicID);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.WorkMatterDocument> GetWorkMatterDocumentByPublicIDAsync(string PublicID) {
            return base.Channel.GetWorkMatterDocumentByPublicIDAsync(PublicID);
        }
        
        public Guidewire_Integration.GWBCS.VendorDocument[] GetAllVendorDocuments(string PublicID, string SPID, string Filename, string ContactID, string ContactName) {
            return base.Channel.GetAllVendorDocuments(PublicID, SPID, Filename, ContactID, ContactName);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.VendorDocument[]> GetAllVendorDocumentsAsync(string PublicID, string SPID, string Filename, string ContactID, string ContactName) {
            return base.Channel.GetAllVendorDocumentsAsync(PublicID, SPID, Filename, ContactID, ContactName);
        }
        
        public Guidewire_Integration.GWBCS.VendorDocument GetVendorDocumentBySPID(string SPID) {
            return base.Channel.GetVendorDocumentBySPID(SPID);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.VendorDocument> GetVendorDocumentBySPIDAsync(string SPID) {
            return base.Channel.GetVendorDocumentBySPIDAsync(SPID);
        }
        
        public Guidewire_Integration.GWBCS.VendorDocument GetVendorDocumentByPublicID(string PublicID) {
            return base.Channel.GetVendorDocumentByPublicID(PublicID);
        }
        
        public System.Threading.Tasks.Task<Guidewire_Integration.GWBCS.VendorDocument> GetVendorDocumentByPublicIDAsync(string PublicID) {
            return base.Channel.GetVendorDocumentByPublicIDAsync(PublicID);
        }
    }
}
