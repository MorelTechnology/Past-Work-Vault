<?xml version="1.0"?><DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts" DTS:ExecutableType="SSIS.Package.2">
<DTS:Property DTS:Name="PackageFormatVersion">3</DTS:Property>
<DTS:Property DTS:Name="VersionComments"></DTS:Property>
<DTS:Property DTS:Name="CreatorName">TRG\smarc</DTS:Property>
<DTS:Property DTS:Name="CreatorComputerName">SMARC-LAP1</DTS:Property>
<DTS:Property DTS:Name="CreationDate" DTS:DataType="7">8/20/2015 9:28:35 AM</DTS:Property>
<DTS:Property DTS:Name="PackageType">5</DTS:Property>
<DTS:Property DTS:Name="ProtectionLevel">1</DTS:Property>
<DTS:Property DTS:Name="MaxConcurrentExecutables">-1</DTS:Property>
<DTS:Property DTS:Name="PackagePriorityClass">0</DTS:Property>
<DTS:Property DTS:Name="VersionMajor">1</DTS:Property>
<DTS:Property DTS:Name="VersionMinor">0</DTS:Property>
<DTS:Property DTS:Name="VersionBuild">11</DTS:Property>
<DTS:Property DTS:Name="VersionGUID">{43E22394-0A98-49EE-9E56-017F1A001DA4}</DTS:Property>
<DTS:Property DTS:Name="EnableConfig">-1</DTS:Property>
<DTS:Property DTS:Name="CheckpointFileName"></DTS:Property>
<DTS:Property DTS:Name="SaveCheckpoints">0</DTS:Property>
<DTS:Property DTS:Name="CheckpointUsage">0</DTS:Property>
<DTS:Property DTS:Name="SuppressConfigurationWarnings">0</DTS:Property>
<DTS:Configuration>
<DTS:Property DTS:Name="ConfigurationType">1</DTS:Property>
<DTS:Property DTS:Name="ConfigurationString">c:\scott\TPAMailImporter\TPAMailImporter\TPAMailImporter.dtsConfig</DTS:Property>
<DTS:Property DTS:Name="ConfigurationVariable"></DTS:Property>
<DTS:Property DTS:Name="ObjectName">Configuration 1</DTS:Property>
<DTS:Property DTS:Name="DTSID">{7FD05E3D-1712-4F0A-A385-97862D52BEAF}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Configuration>
<DTS:Property DTS:Name="LastModifiedProductVersion">10.50.1600.1</DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">1033</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">\\mansan02\share$\Production Support team\MailAttachments</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">attachmentFolder</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8152B0C6-AC7B-4933-9752-8EF5BC76333D}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">Data Source=MANTESTBS01;Initial Catalog=FileAutomation;Integrated Security=True;</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">connectionString</DTS:Property>
<DTS:Property DTS:Name="DTSID">{39A2E43D-01E7-48F7-AE18-8D36304DCAAB}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">RSITOPS@trg.com</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">emailAccount</DTS:Property>
<DTS:Property DTS:Name="DTSID">{571A3424-860B-4986-9DF2-C1215D998BDB}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:Variable>
<DTS:Property DTS:Name="Expression"></DTS:Property>
<DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property>
<DTS:Property DTS:Name="Namespace">User</DTS:Property>
<DTS:Property DTS:Name="ReadOnly">0</DTS:Property>
<DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property>
<DTS:Property DTS:Name="IncludeInDebugDump">2345</DTS:Property><DTS:VariableValue DTS:DataType="8">rsops2011</DTS:VariableValue>
<DTS:Property DTS:Name="ObjectName">emailPassword</DTS:Property>
<DTS:Property DTS:Name="DTSID">{2D47F519-8DD2-4E51-80D1-5742A936600D}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">1</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0">
<DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property>
<DTS:Property DTS:Name="ExecutionAddress"></DTS:Property>
<DTS:Property DTS:Name="TaskContact"></DTS:Property>
<DTS:Property DTS:Name="ForceExecValue">0</DTS:Property>
<DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property>
<DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property>
<DTS:Property DTS:Name="Disabled">0</DTS:Property>
<DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property>
<DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property>
<DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property>
<DTS:Property DTS:Name="LocaleID">-1</DTS:Property>
<DTS:Property DTS:Name="TransactionOption">1</DTS:Property>
<DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions>
<DTS:Property DTS:Name="LoggingMode">0</DTS:Property>
<DTS:Property DTS:Name="FilterKind">1</DTS:Property>
<DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Property DTS:Name="ObjectName">Script Task</DTS:Property>
<DTS:Property DTS:Name="DTSID">{E17A0EA4-96D4-4637-8F63-DAA0FBDD1848}</DTS:Property>
<DTS:Property DTS:Name="Description">Script Task</DTS:Property>
<DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ST_74ac98ca069a4e6c9b4d8d00e11d44ae" VSTAMajorVersion="2" VSTAMinorVersion="1" Language="CSharp" EntryPoint="Main" ReadOnlyVariables="User::attachmentFolder,User::connectionString,User::emailAccount,User::emailPassword" ReadWriteVariables=""><ProjectItem Name="\properties\resources.resx">
<![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem><ProjectItem Name="\properties\settings.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties.Settings.get_Default():ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties.Sett" +
    "ings")]

namespace ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\callbackmethods.cs">
<![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography.X509Certificates;

namespace ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj
{
    public static class CallbackMethods
    {
        public static bool RedirectionUrlValidationCallback(string redirectionUrl)
        {
            // The default for the validation callback is to reject the URL.
            bool result = false;

            Uri redirectionUri = new Uri(redirectionUrl);

            // Validate the contents of the redirection URL. In this simple validation
            // callback, the redirection URL is considered valid if it is using HTTPS
            // to encrypt the authentication credentials. 
            if (redirectionUri.Scheme == "https")
            {
                result = true;
            }
            return result;
        }


        public static bool CertificateValidationCallBack(
object sender,
System.Security.Cryptography.X509Certificates.X509Certificate certificate,
System.Security.Cryptography.X509Certificates.X509Chain chain,
System.Net.Security.SslPolicyErrors sslPolicyErrors)
        {
            //return true;
            // If the certificate is a valid, signed certificate, return true.
            if (sslPolicyErrors == System.Net.Security.SslPolicyErrors.None)
            {
                return true;
            }

            // If there are errors in the certificate chain, look at each error to determine the cause.
            if ((sslPolicyErrors & System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors) != 0)
            {
                if (chain != null && chain.ChainStatus != null)
                {
                    foreach (System.Security.Cryptography.X509Certificates.X509ChainStatus status
                        in chain.ChainStatus)
                    {
                        if ((certificate.Subject == certificate.Issuer) &&
                           (status.Status ==
                           System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UntrustedRoot))
                        {
                            // Self-signed certificates with an untrusted root are valid. 
                            continue;
                        }
                        else
                        {
                            if (status.Status !=
                                System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError)
                            {
                                // If there are any other errors in the certificate chain, the certificate is invalid,
                                // so the method returns false.
                                return false;
                            }
                        }
                    }
                }

                // When processing reaches this line, the only errors in the certificate chain are 
                // untrusted root errors for self-signed certificates. These certificates are valid
                // for default Exchange server installations, so return true.
                return true;
            }
            else
            {
                // In all other cases, return false.
                return false;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\properties\settings.settings">
<![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem><ProjectItem Name="\properties\assemblyinfo.cs">
<![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj")]
[assembly: AssemblyCopyright("Copyright @  2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem><ProjectItem Name="\properties\resources.designer.cs">
<![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem><ProjectItem Name="\scriptmain.cs">
<![CDATA[/*
   Microsoft SQL Server Integration Services Script Task
   Write scripts using Microsoft Visual C# 2008.
   The ScriptMain is the entry point class of the script.
*/

using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;

using System;
using System.Net;
using System.Net.Security;
using Microsoft.Exchange.WebServices.Data;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;




namespace ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj
{
    [System.AddIn.AddIn("ScriptMain", Version = "1.0", Publisher = "", Description = "")]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        public static string connectionString;
        public static string attachmentFolder;
        public static string emailAccount;
        public static string emailPassword;

        public void Main()
        {
            connectionString = Dts.Variables["connectionString"].Value.ToString();
            attachmentFolder = Dts.Variables["attachmentFolder"].Value.ToString();
            emailAccount = Dts.Variables["emailAccount"].Value.ToString();
            emailPassword = Dts.Variables["emailPassword"].Value.ToString();

            ServicePointManager.ServerCertificateValidationCallback = CallbackMethods.CertificateValidationCallBack;
            ExchangeService service = new ExchangeService(ExchangeVersion.Exchange2010_SP2);

            service.Credentials = new WebCredentials(emailAccount, emailPassword);

            // Set the url of server.
            if (!AutodiscoverUrl(service))
            {
                return;
            }

            // Use the EmailMessageSchema.Subject to filter the emails.
            Dictionary<PropertyDefinition, String> filters = new Dictionary<PropertyDefinition, string>();
            // might blow filters[EmailMessageSchema.Subject] = subjectString;

            String folderName = "Subject contains for export email";

            // Delete the duplicate folder.
            DeleteFolder(service, WellKnownFolderName.SearchFolders, folderName);

            // Create the search folder named "Subject contains" to get the emails that received in last n days
            CreateSearchFolder(service, filters, folderName);

            // Get the search folder.
            SearchFilter filter = new SearchFilter.IsEqualTo(FolderSchema.DisplayName, folderName);
            SearchFolder searchFolder = GetFolder(service, filter, WellKnownFolderName.SearchFolders) as SearchFolder;

            // Export the email messages to the application directory.
            ExportEmailMessages(searchFolder, Environment.CurrentDirectory);

            Dts.TaskResult = (int)ScriptResults.Success;
        }



        private static SearchFolder CreateSearchFolder(ExchangeService service,
            Dictionary<PropertyDefinition, String> filters, String displayName)
        {
            if (service == null)
            {
                return null;
            }

            SearchFilter.SearchFilterCollection filterCollection = new SearchFilter.SearchFilterCollection(LogicalOperator.And);

            // We only search the nearest 2 days emails.
            DateTime startDate = DateTime.Now.AddDays(-2);
            DateTime endDate = DateTime.Now;
            SearchFilter startDateFilter = new SearchFilter.IsGreaterThanOrEqualTo(EmailMessageSchema.DateTimeCreated, startDate);
            SearchFilter endDateFilter = new SearchFilter.IsLessThanOrEqualTo(EmailMessageSchema.DateTimeCreated, endDate);
            filterCollection.Add(startDateFilter);
            filterCollection.Add(endDateFilter);

            SearchFilter itemClassFilter = new SearchFilter.IsEqualTo(EmailMessageSchema.ItemClass, "IPM.Note");
            filterCollection.Add(itemClassFilter);

            // Set the other filters.
            if (filters != null)
            {
                foreach (PropertyDefinition property in filters.Keys)
                {
                    SearchFilter searchFilter =
                        new SearchFilter.ContainsSubstring(property, filters[property]);
                    filterCollection.Add(searchFilter);
                }
            }

            FolderId folderId = new FolderId(WellKnownFolderName.Inbox);

            Boolean isDuplicateFoler = true;
            SearchFilter duplicateFilter = new SearchFilter.IsEqualTo(FolderSchema.DisplayName, displayName);
            SearchFolder searchFolder = GetFolder(service, duplicateFilter, WellKnownFolderName.SearchFolders) as SearchFolder;

            // If there isn't the specific search folder, we create a new one.
            if (searchFolder == null)
            {
                searchFolder = new SearchFolder(service);
                isDuplicateFoler = false;
            }
            searchFolder.SearchParameters.RootFolderIds.Add(folderId);
            searchFolder.SearchParameters.Traversal = SearchFolderTraversal.Shallow;
            searchFolder.SearchParameters.SearchFilter = filterCollection;

            if (isDuplicateFoler)
            {
                searchFolder.Update();
            }
            else
            {
                searchFolder.DisplayName = displayName;

                searchFolder.Save(WellKnownFolderName.SearchFolders);
            }

            return searchFolder;
        }

        private static void ExportEmailMessages(SearchFolder searchFolder, String filePath)
        {
            if (searchFolder == null)
            {
                return;
            }

            String[] invalidStings = { "\\", ",", ":", "*", "?", "\"", "<", ">", "|" };

            PropertySet itemPorpertySet = new PropertySet(BasePropertySet.FirstClassProperties,
                EmailMessageSchema.MimeContent);

            const Int32 pageSize = 50;
            ItemView itemView = new ItemView(pageSize);

            FindItemsResults<Item> findResults = null;
            do
            {
                findResults = searchFolder.FindItems(itemView);

                foreach (Item item in findResults.Items)
                {
                    if (!(item is EmailMessage))
                    {
                    }

                    if (item is EmailMessage)
                    {
                        EmailMessage email = item as EmailMessage;
                        email.Load(itemPorpertySet);

                        Byte[] content = email.MimeContent.Content;
                        String fileName = email.Subject;

                        int id = 0;

                        for (int i = 0; i < email.Attachments.Count; i++)
                        {
                            if (email.Attachments[i] is FileAttachment)
                            {
                                FileAttachment fileAttachment = email.Attachments[i] as FileAttachment;

                                if (fileAttachment.Name != null)
                                {
                                    string fileExtension = (fileAttachment.Name.LastIndexOf(".") > 0) ? fileAttachment.Name.Substring(fileAttachment.Name.LastIndexOf(".") + 1) : "";
                                    string fileType = fileAttachment.ContentType;

                                    if (id == 0)
                                    {
                                        for (int j = 0; j < email.ToRecipients.Count; j++)
                                        {
                                            if (email.ToRecipients[j].ToString().ToUpper().IndexOf("TPADATA") >= 0)
                                            {
                                                if (hasMessageBeenProcessed(email.InternetMessageId.ToString(), email.DateTimeReceived.ToString(), email.DateTimeSent.ToString(), email.Sender.Name, email.Subject, email.Body.Text) == false)
                                                    id = addReceivedMessage(email.InternetMessageId.ToString(), email.DateTimeReceived.ToString(), email.DateTimeSent.ToString(), email.Sender.Name, email.Subject, email.Body.Text);
                                            }
                                        }
                                    }

                                    if (id > 0)
                                    {
                                        string savedFileName = Guid.NewGuid().ToString() + "." + fileExtension;
                                        addReceivedFile(id.ToString(), fileAttachment.Name, fileType, savedFileName);
                                        fileAttachment.Load(Path.Combine(attachmentFolder, savedFileName));
                                    }
                                }
                            }

                        }

                        // Replace all the invaild strings.
                        foreach (String str in invalidStings)
                        {
                            fileName = fileName.Replace(str, "");
                        }

                        fileName = fileName.Replace("/", "");
                        // Export the emails to the .eml files.
                        fileName = Path.Combine(filePath, fileName + ".eml");
                        File.WriteAllBytes(fileName, content);
                        //Console.WriteLine("Export the email:{0}", email.Subject);
                    }
                }

                itemView.Offset += pageSize;
            } while (findResults.MoreAvailable);
        }

        private static Folder GetFolder(ExchangeService service, SearchFilter filter, WellKnownFolderName folder)
        {
            if (service == null)
            {
                return null;
            }

            PropertySet propertySet = new PropertySet(BasePropertySet.IdOnly);

            FolderView folderView = new FolderView(5);
            folderView.PropertySet = propertySet;

            FindFoldersResults searchResults = service.FindFolders(folder,
                filter, folderView);

            return searchResults.FirstOrDefault();
        }

        private static void DeleteFolder(ExchangeService service, WellKnownFolderName parentFolder,
            String folderName)
        {
            SearchFilter searchFilter = new SearchFilter.IsEqualTo(FolderSchema.DisplayName, folderName);

            Folder folder = GetFolder(service, searchFilter, parentFolder);

            if (folder != null)
                folder.Delete(DeleteMode.HardDelete);
        }

        private static Boolean AutodiscoverUrl(ExchangeService service)
        {
            Boolean isSuccess = false;

            try
            {
                service.AutodiscoverUrl("smarc@trg.com", CallbackMethods.RedirectionUrlValidationCallback);
                isSuccess = true;
            }
            catch (Exception)
            {
                throw;
            }

            return isSuccess;
        }

        private static bool hasMessageBeenProcessed(string id, string received, string sent, string sender, string subject, string body)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(connectionString))
                {
                    con.Open();
                    using (SqlCommand command = con.CreateCommand())
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = "spMessageExists";
                        command.Parameters.Add(new SqlParameter("@InternetMessageID", id));
                        command.Parameters.Add(new SqlParameter("@DateReceived", received));
                        command.Parameters.Add(new SqlParameter("@Sender", sender));

                        SqlParameter pvExists = new SqlParameter();
                        pvExists.ParameterName = "@exists";
                        pvExists.DbType = DbType.Int32;
                        pvExists.Direction = ParameterDirection.Output;

                        command.Parameters.Add(pvExists);
                        command.ExecuteNonQuery();
                        return (((int)pvExists.Value > 0) ? true : false);
                    }
                }
            }
            catch (Exception)
            {
                throw;
                return false;
            }
        }

        private static int addReceivedMessage(string id, string received, string sent, string sender, string subject, string body)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(connectionString))
                {
                    con.Open();
                    using (SqlCommand command = con.CreateCommand())
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = "spInsertMessage";
                        command.Parameters.Add(new SqlParameter("@InternetMessageID", id));
                        command.Parameters.Add(new SqlParameter("@DateReceived", received));
                        command.Parameters.Add(new SqlParameter("@DateSent", sent));
                        command.Parameters.Add(new SqlParameter("@Sender", sender));
                        command.Parameters.Add(new SqlParameter("@Subject", (subject == null) ? "" : subject));
                        command.Parameters.Add(new SqlParameter("@TextBody", (body == null) ? "" : body));

                        SqlParameter pvOuputID = new SqlParameter();
                        pvOuputID.ParameterName = "@new_identity";
                        pvOuputID.DbType = DbType.Int32;
                        pvOuputID.Direction = ParameterDirection.Output;

                        command.Parameters.Add(pvOuputID);
                        command.ExecuteNonQuery();
                        return (int)pvOuputID.Value;
                    }
                }
            }
            catch (Exception)
            {
                throw;
                return -1;
            }
        }

        private static int addReceivedFile(string id, string receivedFileName, string receivedFileType, string savedFileName)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(connectionString))
                {
                    con.Open();
                    using (SqlCommand command = con.CreateCommand())
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.CommandText = "spInsertFile";
                        command.Parameters.Add(new SqlParameter("@ReceivedMessageID", id));
                        command.Parameters.Add(new SqlParameter("@ReceivedFileName", receivedFileName));
                        command.Parameters.Add(new SqlParameter("@ReceivedFileType", (receivedFileType == null) ? "" : receivedFileType));
                        command.Parameters.Add(new SqlParameter("@SavedFileName", savedFileName));

                        SqlParameter pvOuputID = new SqlParameter();
                        pvOuputID.ParameterName = "@new_identity";
                        pvOuputID.DbType = DbType.Int32;
                        pvOuputID.Direction = ParameterDirection.Output;

                        command.Parameters.Add(pvOuputID);
                        command.ExecuteNonQuery();
                        return (int)pvOuputID.Value;
                    }
                }
            }
            catch (Exception)
            {
                throw;
                return -1;
            }
        }








    }
}]]></ProjectItem><ProjectItem Name="\st_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj">
<![CDATA[<Project ToolsVersion="3.5" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{A860303F-1F3F-4691-B57E-529FC101A107};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj</RootNamespace>
    <AssemblyName>ST_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj</AssemblyName>
    <ProjectGuid>{16C9F122-EF50-4079-9370-E3D18AAE70FA}</ProjectGuid>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>..\..\..\..\..\..\..\scott\TPAMailImporter\TPAMailImporter\packages\Microsoft\Exchange\Web Services\2.0\Microsoft.Exchange.WebServices.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.AddIn, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" />
    <Reference Include="System.Core">
      <RequiredTargetFramework>3.5</RequiredTargetFramework>
    </Reference>
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=10.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="CallbackMethods.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{A860303F-1F3F-4691-B57E-529FC101A107}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{C1B21C64-9E6F-4923-A89D-9F958503C1CE}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\InstallDir#\devenv.exe" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ScriptTask</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem><BinaryItem Name="\bin\release\st_74ac98ca069a4e6c9b4d8d00e11d44ae.csproj.dll">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
AgBwb38AAAoIHwtvgAAACggYb4EAAAoHb3sAAAoIb30AAAomB2+CAAAKJghvgwAACqVVAAABFjAD
FisBFw3eFwcsBgdvOQAACtwGLAYGbzkAAArcJv4aCSoAAAABKAAAAgAYAKC4AAoAAAAAAgALALfC
AAoAAAAAAAAAAMzMAANhAAABGzAEACcBAAALAAARfgQAAARzdgAACgoGb3cAAAoGb3gAAAoLBxpv
eQAACgdyQwIAcG96AAAKB297AAAKcuEBAHACc3wAAApvfQAACiYHb3sAAApyBwIAcANzfAAACm99
AAAKJgdvewAACnJjAgBwBHN8AAAKb30AAAomB297AAAKciMCAHAFc3wAAApvfQAACiYHb3sAAApy
dwIAcA4ELAQOBCsFcoUBAHBzfAAACm99AAAKJgdvewAACnKJAgBwDgUsBA4FKwVyhQEAcHN8AAAK
b30AAAomc34AAAoMCHKdAgBwb38AAAoIHwtvgAAACggYb4EAAAoHb3sAAAoIb30AAAomB2+CAAAK
JghvgwAACqVVAAABDd4XBywGB285AAAK3AYsBgZvOQAACtwm/hoJKgBBTAAAAgAAABgAAAD2AAAA
DgEAAAoAAAAAAAAAAgAAAAsAAAANAQAAGAEAAAoAAAAAAAAAAAAAAAAAAAAiAQAAIgEAAAMAAABh
AAABGzAEAOsAAAALAAARfgQAAARzdgAACgoGb3cAAAoGb3gAAAoLBxpveQAACgdyuQIAcG96AAAK
B297AAAKctMCAHACc3wAAApvfQAACiYHb3sAAApy+QIAcANzfAAACm99AAAKJgdvewAACnIdAwBw
BCwDBCsFcoUBAHBzfAAACm99AAAKJgdvewAACnJBAwBwBXN8AAAKb30AAAomc34AAAoMCHKdAgBw
b38AAAoIHwtvgAAACggYb4EAAAoHb3sAAAoIb30AAAomB2+CAAAKJghvgwAACqVVAAABDd4XBywG
B285AAAK3AYsBgZvOQAACtwm/hoJKgABKAAAAgAYALrSAAoAAAAAAgALANHcAAoAAAAAAAAAAObm
AANhAAABHgIohAAACioAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291
cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1
YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVz
b3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3
AAAAAAUAbAAAAPQJAAAjfgAAYAoAANAQAAAjU3RyaW5ncwAAAAAwGwAAYAMAACNVUwCQHgAAEAAA
ACNHVUlEAAAAoB4AAHgEAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+gEzABYAAAEAAABrAAAA
BgAAAAoAAAATAAAAIgAAAIQAAAACAAAADgAAAAsAAAACAAAAAwAAAAQAAAAIAAAAAQAAAAgAAAAB
AAAAAQAAAAEAAAAAAAoAAQAAAAAABgDmAN8ACgACAe0ADgBiATkBBgB+Ad8ABgCUAYMBBgDFAbAB
BgCOAmACCgCeAmACCgC8AqgCEgBvA0sDEgB8A0sDBgCnA4wDEgC0A0sDEgDuA0sDEgD1A0sDEgAC
BEsDBgCGBXQFBgCdBXQFBgC6BXQFBgDZBXQFBgDyBXQFBgALBnQFBgAmBnQFBgBBBnQFBgBaBnQF
BgCTBnMGBgCzBnMGBgDkBtEGBgABB98ABgAGB98ABgAqB3QFCgBWB0AHCgBvB0AHBgCEB3MGCgCm
B98ABgC1B98ACgDIB2ACCgD/B2ACFgAsCB8IDgA7CDkBGgCUCHQIGgCsCHQICgDRCKgCCgAACfUI
EgA8CUsDEgBMCUsDEgBbCUsDEgBvCUsDEgCTCUsDPwCsCQAAEgC2CUsDBgDNCd8APwD9CQAAEgAU
CksDBgAkCt8AEgA9CksDPwBYCgAAPwBvCgAAMwCRCgAA7wCoCgAAPwDNCgAABgDoCt8AEgD8CksD
EgAFC0sDEgAxC0sDEgBWC0sDEgCzC0sDEgC/C0sDEgDPC0sDEgDYC0sDEgDrC0sDBgAZDPoLBgAw
DIwDEgA+DEsDEgBLDEsDEgCnC0sDEgB6DEsDEgCfDEsDEgC7DEsDEgDGDEsDEgAEDUsDEgAsDUsD
EgCQDUsDBgC4Dd8ABgDMDd8ABgDcDdINBgDxDdINBgAXDgQOEgAjDksDEgBVDksDEgBgDksDEgB5
DksDHgCwDqQOBgC7DowDEgDYDksDEgAWD+oOBgBDD98AIgBvD1kPIgCQD30PIgCiD1kPIgC7D30P
IgDFD00PIgDxD1kPIgAXEFkPIgAkEH0PIgBCEE0PIgBUEE0PAAAAAAEAAAAAAAEAAQAAABAAOQBD
AAUAAQABAAABEAB5AEMACQADAAUAgQEQAIIAkgAFAAQACAABABAAvQCSAA0ABAAKAAMBAADIAAAA
EQAIABQAEQCkARMAEQDRARcAEQAbAjkAFgDqAlcAFgD7AlcAFgAMA1cAFgAZA1cABgZ4BK8AVoCA
BLIAVoCIBLIAUCAAAAAAgxjhARsAAQBYIAAAAACTCOcBHwABAJEgAAAAAJMI+wEkAAEAmCAAAAAA
kwgHAikAAQCgIAAAAACWCCsCPQACALMgAAAAAIYY4QEbAAIApyAAAAAAkRifB/IAAgC8IAAAAACW
AD8CRwACAOggAAAAAJYAzAJMAAMAXCEAAAAAhgAnAxsABwCEIgAAAACRAMcDYwAHAOgjAAAAAJEA
2gNyAAoAiCcAAAAAkQAWBHkADADAJwAAAACRACAEhAAPAOwnAAAAAJEALQSNABIALCgAAAAAkQA9
BJMAEwA0KQAAAACRAFUEnQAZALQqAAAAAJEAaASnAB8A1CsAAAAAhhjhARsAIwAAAAEAkAQAAAEA
lgQAAAEApQQAAAIArAQAAAMAuAQAAAQAvgQAAAEAzgQAAAIA1gQAAAMA3gQAAAEA6gQAAAIA9wQA
AAEAzgQAAAIAAAUAAAMABwUAAAEAzgQAAAIADgUAAAMAGwUAAAEAzgQAAAEAJgUAAAIAKQUAAAMA
MgUAAAQApQQAAAUANwUAAAYAPwUAAAEAJgUAAAIAKQUAAAMAMgUAAAQApQQAAAUANwUAAAYAPwUA
AAEAJgUAAAIARAUAAAMAVQUAAAQAZgWJAOEBwACRAOEBwACZAOEBwAChAOEBwACpAOEBwACxAOEB
wAC5AOEBwADBAOEBwADJAOEBwADRAOEBxQDZAOEBGwDhAOEBGwAJAOEBGwDpABgHygDpADMH0QAp
AOEB1gABAeEB4gARAeEBGwARAOEBGwAZAeEBwAAZAaoH9gAhAbwH+gBBANgHBwE5AOgH9gA5APQH
9gApARQIDgE5AeEBwAAZAE0IWgFBAZ4IYAFJAbUIZgFRAb4IbQEJAMgI9gBZAeEBcQFhARQJdwFZ
AOEBfgFxAeEBhQF5AYMJiwEMAOEBGwCJAaAJmgGRAeEBngGhAdkJpgFBAe4JxQCpAeEBuwG5AS0K
wgG5ATUKyAHBAUgKmgHJAeEBngHRAeEBngGpAYMKzwHBAYcKmgEMAJ8K1QEUALMK6gEcAMEK/wEM
ALUIBALpAeEBCwIcAN8KEwLxAfQKGwD5AeEBFwJRAOEBHQJRABwLIwIBAkQLKQIJAoMKLwIBAmwL
NgIBAnoLzwFxAIsLGwBxAJILwABxAKILFwLBAacLmgEZAuEBZgIpAuEBxQBxAPALcQIkACYMiAIs
ALMKmwI0AMEK/wFZAlkMrgI5Al4MtQJhAm4MuwI5AugH9gA5Ao8MwAI8ALUIzwJ5AtUM9gAhAd4M
1QIhAeoM2gJ5AvQM9gBRAhsN3wJEALUIzwIhATkN9gAhAUEN1QJRAkkN9gA5Al8N7gI5AnQN7gJR
AoUN9AKRAtUM9gA5ApwN+gKZAqUN9gBEAK4NAAOhAr0NBAMhAcUNCgOpAsgI9gCxAuENEQOBAlkM
wAA8AK4NAAMhAekNFwMhAcUNEQO5AvYNHQPBAt8KEwLJAi0OAAPJAjgOxQAkAEMOEwIZAuEBagPR
AuEBxQDZAmkOrgJZAIwOcQPpAskOfgNxAOMOnAMBA+EBcQFZAC0EqgMRA+EBwAAZA50PGwARA60P
tgMpA9EPvAMpA+EPwAAhAwgQwwNBA+EByQM5A4MKzwNBA+EBGwBJAzAQwABJA0kQ2ANJA2cQ3wMp
A3UQAANJA74IbQEZAOEBGwAIACQAtgAIACgAuwApAIsA6QAuABMAMAQuABsAMAQuACMAMAQuAFMA
TQQuAAsAAAQuACsAAAQuADsAMAQuAFsAVgQuADMANgRDAGMAuwBJAIsA6QBhAJMAuwCjANsAIAHd
AAABFAGqAT0CJAOQA6MDsgPmA/MDAgABAAMAAwAAAJQBLwAAABMCNAAAADcCQgACAAIAAwACAAMA
BQABAAQABQACAAUABwCSAeEB9gF/ApICpQLGAuUCBIAAAAEAAADdF/9AAAAAAAAAkgAAAAIAAAAA
AAAAAAAAAAEA1gAAAAAAAgAAAAAAAAAAAAAAAQDfAAAAAAAKAAAAAAAAAAAAAAAKABoBAAAAAA8A
AAAAAAAAAAAAAFoALAMAAAAAAwAFAAAAAAAAAAAAAQAfCAAAAAAKAAAAAAAAAAAAAAAKAFUIAAAA
AAMABQAAAAAAAAAAAAEAmA4AAAAAAgAAAAAAAAAAAAAAAQBNDwAAAAAAAAAAAQAAAIUQAAAGAAUA
5QCLAwAAAAAAPE1vZHVsZT4AU1RfNzRhYzk4Y2EwNjlhNGU2YzliNGQ4ZDAwZTExZDQ0YWUuY3Nw
cm9qLmRsbABSZXNvdXJjZXMAU1RfNzRhYzk4Y2EwNjlhNGU2YzliNGQ4ZDAwZTExZDQ0YWUuY3Nw
cm9qLlByb3BlcnRpZXMAU2V0dGluZ3MAQ2FsbGJhY2tNZXRob2RzAFNUXzc0YWM5OGNhMDY5YTRl
NmM5YjRkOGQwMGUxMWQ0NGFlLmNzcHJvagBTY3JpcHRNYWluAFNjcmlwdFJlc3VsdHMAbXNjb3Js
aWIAU3lzdGVtAE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdz
QmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0
ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXph
dGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdl
cgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVm
YXVsdABEZWZhdWx0AFJlZGlyZWN0aW9uVXJsVmFsaWRhdGlvbkNhbGxiYWNrAFN5c3RlbS5TZWN1
cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcwBYNTA5Q2VydGlmaWNhdGUAWDUwOUNo
YWluAFN5c3RlbS5OZXQuU2VjdXJpdHkAU3NsUG9saWN5RXJyb3JzAENlcnRpZmljYXRlVmFsaWRh
dGlvbkNhbGxCYWNrAGNvbm5lY3Rpb25TdHJpbmcAYXR0YWNobWVudEZvbGRlcgBlbWFpbEFjY291
bnQAZW1haWxQYXNzd29yZABNYWluAE1pY3Jvc29mdC5FeGNoYW5nZS5XZWJTZXJ2aWNlcwBNaWNy
b3NvZnQuRXhjaGFuZ2UuV2ViU2VydmljZXMuRGF0YQBTZWFyY2hGb2xkZXIARXhjaGFuZ2VTZXJ2
aWNlAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAERpY3Rpb25hcnlgMgBQcm9wZXJ0eURlZmlu
aXRpb24AQ3JlYXRlU2VhcmNoRm9sZGVyAEV4cG9ydEVtYWlsTWVzc2FnZXMARm9sZGVyAFNlYXJj
aEZpbHRlcgBXZWxsS25vd25Gb2xkZXJOYW1lAEdldEZvbGRlcgBEZWxldGVGb2xkZXIAQXV0b2Rp
c2NvdmVyVXJsAGhhc01lc3NhZ2VCZWVuUHJvY2Vzc2VkAGFkZFJlY2VpdmVkTWVzc2FnZQBhZGRS
ZWNlaXZlZEZpbGUAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAcmVkaXJlY3Rpb25VcmwA
c2VuZGVyAGNlcnRpZmljYXRlAGNoYWluAHNzbFBvbGljeUVycm9ycwBzZXJ2aWNlAGZpbHRlcnMA
ZGlzcGxheU5hbWUAc2VhcmNoRm9sZGVyAGZpbGVQYXRoAGZpbHRlcgBmb2xkZXIAcGFyZW50Rm9s
ZGVyAGZvbGRlck5hbWUAaWQAcmVjZWl2ZWQAc2VudABzdWJqZWN0AGJvZHkAcmVjZWl2ZWRGaWxl
TmFtZQByZWNlaXZlZEZpbGVUeXBlAHNhdmVkRmlsZU5hbWUAU3lzdGVtLlJlZmxlY3Rpb24AQXNz
ZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5
Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQ
cm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVt
YXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRy
aWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRp
b25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9z
dGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUA
R2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRN
b2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGls
ZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFVyaQBnZXRfU2NoZW1lAFN0cmluZwBvcF9FcXVh
bGl0eQBYNTA5Q2hhaW5TdGF0dXMAZ2V0X0NoYWluU3RhdHVzAGdldF9TdWJqZWN0AGdldF9Jc3N1
ZXIAWDUwOUNoYWluU3RhdHVzRmxhZ3MAZ2V0X1N0YXR1cwBTeXN0ZW0uQWRkSW4AQWRkSW5BdHRy
aWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1Zhcmlh
YmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcAUmVtb3RlQ2VydGlmaWNh
dGVWYWxpZGF0aW9uQ2FsbGJhY2sAU3lzdGVtLk5ldABTZXJ2aWNlUG9pbnRNYW5hZ2VyAHNldF9T
ZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjawBFeGNoYW5nZVZlcnNpb24AV2ViQ3Jl
ZGVudGlhbHMARXhjaGFuZ2VTZXJ2aWNlQmFzZQBFeGNoYW5nZUNyZWRlbnRpYWxzAHNldF9DcmVk
ZW50aWFscwBGb2xkZXJTY2hlbWEARGlzcGxheU5hbWUASXNFcXVhbFRvAFByb3BlcnR5RGVmaW5p
dGlvbkJhc2UARW52aXJvbm1lbnQAZ2V0X0N1cnJlbnREaXJlY3RvcnkAc2V0X1Rhc2tSZXN1bHQA
U2VhcmNoRmlsdGVyQ29sbGVjdGlvbgBMb2dpY2FsT3BlcmF0b3IARGF0ZVRpbWUAZ2V0X05vdwBB
ZGREYXlzAEl0ZW1TY2hlbWEARGF0ZVRpbWVDcmVhdGVkAElzR3JlYXRlclRoYW5PckVxdWFsVG8A
SXNMZXNzVGhhbk9yRXF1YWxUbwBBZGQASXRlbUNsYXNzAEtleUNvbGxlY3Rpb24AZ2V0X0tleXMA
RW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAGdldF9DdXJyZW50AENvbnRhaW5zU3Vic3RyaW5nAE1v
dmVOZXh0AElEaXNwb3NhYmxlAERpc3Bvc2UARm9sZGVySWQAU2VhcmNoRm9sZGVyUGFyYW1ldGVy
cwBnZXRfU2VhcmNoUGFyYW1ldGVycwBGb2xkZXJJZENvbGxlY3Rpb24AZ2V0X1Jvb3RGb2xkZXJJ
ZHMAU2VhcmNoRm9sZGVyVHJhdmVyc2FsAHNldF9UcmF2ZXJzYWwAc2V0X1NlYXJjaEZpbHRlcgBV
cGRhdGUAc2V0X0Rpc3BsYXlOYW1lAFNhdmUATWltZUNvbnRlbnQAUHJvcGVydHlTZXQAQmFzZVBy
b3BlcnR5U2V0AEl0ZW1WaWV3AEZpbmRJdGVtc1Jlc3VsdHNgMQBJdGVtAEZpbmRJdGVtcwBTeXN0
ZW0uQ29sbGVjdGlvbnMuT2JqZWN0TW9kZWwAQ29sbGVjdGlvbmAxAGdldF9JdGVtcwBJRW51bWVy
YXRvcmAxAEVtYWlsTWVzc2FnZQBTZXJ2aWNlT2JqZWN0AExvYWQAZ2V0X01pbWVDb250ZW50AGdl
dF9Db250ZW50AEF0dGFjaG1lbnRDb2xsZWN0aW9uAGdldF9BdHRhY2htZW50cwBDb21wbGV4UHJv
cGVydHlDb2xsZWN0aW9uYDEAQXR0YWNobWVudABGaWxlQXR0YWNobWVudABnZXRfTmFtZQBMYXN0
SW5kZXhPZgBTdWJzdHJpbmcAZ2V0X0NvbnRlbnRUeXBlAEVtYWlsQWRkcmVzc0NvbGxlY3Rpb24A
Z2V0X1RvUmVjaXBpZW50cwBFbWFpbEFkZHJlc3MAVG9VcHBlcgBJbmRleE9mAGdldF9JbnRlcm5l
dE1lc3NhZ2VJZABnZXRfRGF0ZVRpbWVSZWNlaXZlZABnZXRfRGF0ZVRpbWVTZW50AGdldF9TZW5k
ZXIATWVzc2FnZUJvZHkAZ2V0X0JvZHkAZ2V0X1RleHQAZ2V0X0NvdW50AEd1aWQATmV3R3VpZABD
b25jYXQASW50MzIAU3lzdGVtLklPAFBhdGgAQ29tYmluZQBSZXBsYWNlAEZpbGUAV3JpdGVBbGxC
eXRlcwBTeXN0ZW0uQ29sbGVjdGlvbnMASUVudW1lcmF0b3IAUGFnZWRWaWV3AGdldF9PZmZzZXQA
c2V0X09mZnNldABnZXRfTW9yZUF2YWlsYWJsZQBGb2xkZXJWaWV3AFZpZXdCYXNlAHNldF9Qcm9w
ZXJ0eVNldABGaW5kRm9sZGVyc1Jlc3VsdHMARmluZEZvbGRlcnMAU3lzdGVtLkNvcmUAU3lzdGVt
LkxpbnEARW51bWVyYWJsZQBJRW51bWVyYWJsZWAxAEZpcnN0T3JEZWZhdWx0AERlbGV0ZU1vZGUA
RGVsZXRlAE1pY3Jvc29mdC5FeGNoYW5nZS5XZWJTZXJ2aWNlcy5BdXRvZGlzY292ZXIAQXV0b2Rp
c2NvdmVyUmVkaXJlY3Rpb25VcmxWYWxpZGF0aW9uQ2FsbGJhY2sARXhjZXB0aW9uAFN5c3RlbS5E
YXRhAFN5c3RlbS5EYXRhLlNxbENsaWVudABTcWxDb25uZWN0aW9uAFN5c3RlbS5EYXRhLkNvbW1v
bgBEYkNvbm5lY3Rpb24AT3BlbgBTcWxDb21tYW5kAENyZWF0ZUNvbW1hbmQARGJDb21tYW5kAENv
bW1hbmRUeXBlAHNldF9Db21tYW5kVHlwZQBzZXRfQ29tbWFuZFRleHQAU3FsUGFyYW1ldGVyQ29s
bGVjdGlvbgBnZXRfUGFyYW1ldGVycwBTcWxQYXJhbWV0ZXIARGJQYXJhbWV0ZXIAc2V0X1BhcmFt
ZXRlck5hbWUARGJUeXBlAHNldF9EYlR5cGUAUGFyYW1ldGVyRGlyZWN0aW9uAHNldF9EaXJlY3Rp
b24ARXhlY3V0ZU5vblF1ZXJ5AFNUXzc0YWM5OGNhMDY5YTRlNmM5YjRkOGQwMGUxMWQ0NGFlLmNz
cHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAB/UwBUAF8ANwA0AGEAYwA5ADgA
YwBhADAANgA5AGEANABlADYAYwA5AGIANABkADgAZAAwADAAZQAxADEAZAA0ADQAYQBlAC4AYwBz
AHAAcgBvAGoALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAtoAHQA
dABwAHMAACFjAG8AbgBuAGUAYwB0AGkAbwBuAFMAdAByAGkAbgBnAAAhYQB0AHQAYQBjAGgAbQBl
AG4AdABGAG8AbABkAGUAcgAAGWUAbQBhAGkAbABBAGMAYwBvAHUAbgB0AAAbZQBtAGEAaQBsAFAA
YQBzAHMAdwBvAHIAZAAAQ1MAdQBiAGoAZQBjAHQAIABjAG8AbgB0AGEAaQBuAHMAIABmAG8AcgAg
AGUAeABwAG8AcgB0ACAAZQBtAGEAaQBsAAARSQBQAE0ALgBOAG8AdABlAAADXAAAAywAAAM6AAAD
KgAAAz8AAAMiAAADPAAAAz4AAAN8AAADLgAAAQAPVABQAEEARABBAFQAQQAAAy8AAAkuAGUAbQBs
AAAbcwBtAGEAcgBjAEAAdAByAGcALgBjAG8AbQAAH3MAcABNAGUAcwBzAGEAZwBlAEUAeABpAHMA
dABzAAAlQABJAG4AdABlAHIAbgBlAHQATQBlAHMAcwBhAGcAZQBJAEQAABtAAEQAYQB0AGUAUgBl
AGMAZQBpAHYAZQBkAAAPQABTAGUAbgBkAGUAcgAAD0AAZQB4AGkAcwB0AHMAAB9zAHAASQBuAHMA
ZQByAHQATQBlAHMAcwBhAGcAZQAAE0AARABhAHQAZQBTAGUAbgB0AAARQABTAHUAYgBqAGUAYwB0
AAATQABUAGUAeAB0AEIAbwBkAHkAABtAAG4AZQB3AF8AaQBkAGUAbgB0AGkAdAB5AAAZcwBwAEkA
bgBzAGUAcgB0AEYAaQBsAGUAACVAAFIAZQBjAGUAaQB2AGUAZABNAGUAcwBzAGEAZwBlAEkARAAA
I0AAUgBlAGMAZQBpAHYAZQBkAEYAaQBsAGUATgBhAG0AZQAAI0AAUgBlAGMAZQBpAHYAZQBkAEYA
aQBsAGUAVAB5AHAAZQAAHUAAUwBhAHYAZQBkAEYAaQBsAGUATgBhAG0AZQAAACKt4EBxfUBJnrhp
T2aY0agACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIV
BAgAEhkDBhIMBAAAEgwECAASDAQAAQIOCgAEAhwSHRIhESUCBg4IMb84Vq02TjUOAAMSKRItFRIx
AhI1Dg4GAAIBEikOCgADEjkSLRI9EUEIAAMBEi0RQQ4FAAECEi0JAAYCDg4ODg4OCQAGCA4ODg4O
DgcABAgODg4OAgYIAwYRGAQAAAAABAEAAAAEIAEBDgQgAQEIBgABEnUReQQgABJ9BiACAQ4SfQQH
ARIVBiABARGAhQgBAAIAAAAAAAMAAAEDIAAOBQACAg4OBgcCAhKAjQYgAB0RgJUFIAARgJkLBwQR
gJUCHRGAlQg5AQAKU2NyaXB0TWFpbgMAVA4HVmVyc2lvbgMxLjBUDglQdWJsaXNoZXIAVA4LRGVz
Y3JpcHRpb24ABSAAEoChBSAAEoClBiABEoCpHAMgABwFIAIBHBgGAAEBEoCtBiABARGAtQUgAgEO
DgYgAQESgMEHFRIxAhI1DgMGEjUHIAIBEoDNHAMAAA4QBwUSLRUSMQISNQ4OEj0SKQYgAQERgNkF
AAARgN0GIAERgN0NBSABARI9CyAAFRKA7QITABMBCBUSgO0CEjUOCyAAFRGA8QITABMBCBURgPEC
EjUOBCAAEwAGIAETARMAByACARKAzQ4DIAACBSABARFBBSABARItBSAAEoEBBSAAEoEFBiABARKA
/QYgAQERgQkoBw4SgNURgN0RgN0SPRI9Ej0SNRI9EoD9AhI9EikRgN0VEYDxAhI1DgogAgERgREd
EoDNDSABFRKBGQESgR0SgRUIFRKBGQESgR0JIAAVEoEhARMACBUSgSEBEoEdCSAAFRKBJQETAAgV
EoElARKBHQYgAQESgQ0FIAASgTEEIAAdBQUgABKBNQgVEoE5ARKBPQUgARMACAQgAQgOBCABDggF
IAASgUUIFRKBOQESgUkFIAARgN0FIAASgUkFIAASgU0DIAAIBQAAEYFRBgADDg4ODgUAAg4ODgUg
Ag4ODgYAAgEOHQVFBxodDhKBDRKBFRUSgRkBEoEdEoEdEoEpHQUOCAgSgUEODggODh0OHRKAzRUS
gSUBEoEdEYDdEYDdEYDdEYDdEYFRHQ4IBiABARGBEQwgAxKBcRFBEj0SgWkMEAEBHgAVEoF5AR4A
BAoBEjkLBwMSgQ0SgWkSgXEGIAEBEYF9BgcCEj0SOQcgAgEOEoGBAwcBAgUgABKBkQYgAQERgZkF
IAASgZ0FIAIBDhwIIAESgaESgaEGIAEBEYGpBiABARGBrQwHBBKBiRKBkRKBoQIMBwQSgYkSgZES
gaEILwEAKlNUXzc0YWM5OGNhMDY5YTRlNmM5YjRkOGQwMGUxMWQ0NGFlLmNzcHJvagAABQEAAAAA
FgEAEUNvcHlyaWdodCBAICAyMDE1AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25U
aHJvd3MBAAAA2E8AAAAAAAAAAAAA7k8AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOBPAAAAAAAA
AABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAADwAwAAAAAA
AAAAAADwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
/0DdFwAAAQD/QN0XPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEUAMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAALAMAAAEAMAAwADAAMAAwADQAYgAwAAAAgAAr
AAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADcANABhAGMAOQA4AGMA
YQAwADYAOQBhADQAZQA2AGMAOQBiADQAZAA4AGQAMAAwAGUAMQAxAGQANAA0AGEAZQAuAGMAcwBw
AHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgAxADAA
OQAuADEANgA2ADMAOQAAAAAAgAAvAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3
ADQAYQBjADkAOABjAGEAMAA2ADkAYQA0AGUANgBjADkAYgA0AGQAOABkADAAMABlADEAMQBkADQA
NABhAGUALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADUAAACIAC8AAQBPAHIA
aQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8ANwA0AGEAYwA5ADgAYwBhADAANgA5
AGEANABlADYAYwA5AGIANABkADgAZAAwADAAZQAxADEAZAA0ADQAYQBlAC4AYwBzAHAAcgBvAGoA
LgBkAGwAbAAAAAAAeAArAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3ADQAYQBj
ADkAOABjAGEAMAA2ADkAYQA0AGUANgBjADkAYgA0AGQAOABkADAAMABlADEAMQBkADQANABhAGUA
LgBjAHMAcAByAG8AagAAAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA2ADEAMAA5AC4AMQA2ADYAMwA5AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA2ADEAMAA5AC4AMQA2ADYAMwA5AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Property DTS:Name="ObjectName">TPAMailImport</DTS:Property>
<DTS:Property DTS:Name="DTSID">{DE980991-9180-4835-A8FA-0A9E8622A4D8}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName">SSIS.Package.2</DTS:Property>
<DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingTop&gt;1000&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="5" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="3122" y="19473" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="1" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="0" top="1482" logicalid="2" controlid="1" masterid="0" hint1="0" hint2="0" width="8123" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000bb1f00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E17A0EA4-96D4-4637-8F63-DAA0FBDD1848}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">{DE980991-9180-4835-A8FA-0A9E8622A4D8}</DTS:Property>
<DTS:Property DTS:Name="DTSID">{8A531CA8-D672-47C8-BB98-0E65F1D6AF71}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable>
<DTS:PackageVariable>
<DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ddl2="http://schemas.microsoft.com/analysisservices/2003/engine/2" xmlns:ddl2_2="http://schemas.microsoft.com/analysisservices/2003/engine/2/2" xmlns:ddl100_100="http://schemas.microsoft.com/analysisservices/2008/engine/100/100" xmlns:ddl200="http://schemas.microsoft.com/analysisservices/2010/engine/200" xmlns:ddl200_200="http://schemas.microsoft.com/analysisservices/2010/engine/200/200" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingTop&gt;1000&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout100" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout100" version="7" nextobject="5" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="0" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="3122" y="19473" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="1" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.2" tooltip="Script Task" left="0" top="1482" logicalid="2" controlid="1" masterid="0" hint1="0" hint2="0" width="8123" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000bb1f00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E17A0EA4-96D4-4637-8F63-DAA0FBDD1848}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property>
<DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property>
<DTS:Property DTS:Name="ObjectName">package-diagram</DTS:Property>
<DTS:Property DTS:Name="DTSID">{F977B25F-BD3B-4813-B9EE-AE3864141570}</DTS:Property>
<DTS:Property DTS:Name="Description"></DTS:Property>
<DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable></DTS:Executable>